" Basic Options
" =============
" Enables syntax highlighting based on file type.
syntax on


let mapleader=","
" Allows you to switch between unsaved buffers without being forced to save.
set hidden

" Enhances command-line completion with a visual menu for available options.
set wildmenu                    " better cmd line completion
set wildmode=list:longest       " more shell-like completion
set wildignore=*.swp,*.bak,*.pyc,*.class

" case-insensitive matching
set ignorecase
" unless there's upper-case specified
set smartcase

" Displays the cursor position in the status line (line and column numbers).
set ruler

" show line numbers
set number

" highlight current row cursor is in
set cursorline

" highlight search matches
set hlsearch

" highlight search matches while typing
set incsearch

" Prevents wrapping long lines to the next line.
set nowrap

" display + for wrapped lines
set showbreak=+

" always show at least 5 lines below/above cur
set scrolloff=5

" Updates the terminal window title with the file name being edited.
set title

" Disables the terminal bell sound, using a visual indicator instead.
set visualbell

" Display partial commands as you type in the bottom right.
set showcmd

" File formatting
" ===============

" Indent after line ending in { and use cinwords
set cindent
" Set the width of a tab character to 4 spaces
set tabstop=4

" Set the number of spaces to use for each level of indentation
set shiftwidth=4

" Set the number of spaces inserted when you press <Tab> in insert mode
set softtabstop=4

" Convert all tabs to spaces; makes indentation consistent across editors
set expandtab

" Enable automatic indentation and smart indentation
set ai si

" Set maximum line width for text to 79 characters
set textwidth=79

" Automatically insert the current comment prefix when pressing Enter
set formatoptions+=r

" Allow reformatting of comments using 'gq'
set formatoptions+=q

" Set file format support for line endings, preferring Unix-style line endings
set ffs=unix,dos,mac

" Set command history to 1000 entries
set history=1000

" Allow up to 1000 levels of undo history
set undolevels=1000

" Disable compatibility mode
" needed for vundle
set nocompatible
filetype plugin indent on


" Disable mouse support in Vim, allowing normal text selection in iTerm2
set mouse=

" Always display the status line at the bottom of the window
set laststatus=2

" Show invisible characters like tabs and spaces to help with formatting
set list
set listchars=tab:\▸\ ,precedes:<,extends:>
set listchars=tab:\»\ ,

" Open horizontal splits below the current window instead of above
set splitbelow

" Open vertical splits to the right of the current window instead of to the left
set splitright

" Key Mappings
" ============

" clear highlighting
nnoremap <leader><leader>n :match<CR>:nohl<CR> " clears highlight

" scroll up and down
nnoremap <Leader>d <C-d>
nnoremap <Leader>s <C-u>
" quit
nnoremap <M-q> :q<CR>

" Save Changes
nnoremap <C-s> :w<CR>
" make it work in insert mode too
inoremap <C-s> <Esc>:w<CR>
"nnoremap <leader>s :w<CR>

"nnoremap <leader><leader>s :Snippets<CR>

" Map Control + t to open the file search interface (:Files).
nnoremap <leader>t :Files<CR>
nnoremap <C-t> :Files<CR>

" Map Enter (<CR>) to move to the end of the file (G).
nnoremap <CR> G

" Map Backspace (<BS>) to move to the start of the file (gg).
nnoremap <BS> gg

" Map 'vv' to open a new vertical split (:vnew) silently.
nnoremap <silent> vv :vnew<CR>

" Map '||' (double pipe) to open a new vertical split silently.
nnoremap <silent> <Bar><Bar> :vnew<CR>

" Map '--' to open a new horizontal split (:new) silently.
nnoremap <silent> -- <C-w>n

" Map Control + J to move to the window below.
nnoremap <C-J> <C-W><C-J>

" Map Control + K to move to the window above.
nnoremap <C-K> <C-W><C-K>

" Map Control + L to move to the window to the right.
nnoremap <C-L> <C-W><C-L>

" Map Control + H to move to the window to the left.
nnoremap <C-H> <C-W><C-H>

" Open a new tab with Ctrl+n in normal mode
nnoremap <C-n> :tabnew<CR>
" Open a new tab with <leader>n in normal mode
nnoremap <leader>n :tabnew<CR>


" Map 'K' to grep for the word under the cursor and
" open the quickfix window to show the results.
nnoremap K :grep! "<C-R><C-W>"<CR>:cw<CR>

" Exit insert mode
inoremap jj <esc>
inoremap jJ <esc>
inoremap Jj <esc>
inoremap JJ <esc>
inoremap jk <esc>
inoremap jK <esc>
inoremap Jk <esc>
inoremap JK <esc>

" Toggle folding at the current line in normal mode when pressing <Space>
nnoremap <space> za

" Create a fold for the visually selected lines when pressing <Space> in visual mode
vnoremap <space> zf

nnoremap <F3> :NERDTreeToggle<CR>

let s:editor_root=expand("~/.vim")


cmap w!! w !sudo tee % >/dev/null

" Needed for deoplete
if has('macunix')
    " For macOS (often reports as 'macunix')
    " Preferred: Use pipx path if you installed with it
    let g:python3_host_prog = expand('~/venv/nvim-venv/bin/python3')
elseif has('unix')
    " For Linux and other Unix-like systems (excluding macOS)
    let g:python3_host_prog = '/usr/bin/python3'
endif


" Setup runtime path
let &rtp = &rtp . ',' . s:editor_root . '/bundle/Vundle.vim'
set rtp+=~/.fzf

" Create wall of highlight passed 80 characters and highlight text
let &colorcolumn=join(range(81,999),",")
highlight colorcolumn ctermbg=235 guibg=#2c2d27
highlight OverLength ctermbg=white ctermfg=red
match OverLength /\%81v.\+/

" Plugins
" =======

" Install Vundle if not present
let vundle_installed=1
let vundle_readme=s:editor_root . '/bundle/Vundle.vim/README.md'
let vundle_repo = 'https://github.com/VundleVim/Vundle.vim'

if !filereadable(vundle_readme)
    echo "Installing Vundle.."
    echo ""
    silent call mkdir(s:editor_root . '/bundle', "p")
    silent execute "!git clone " . vundle_repo . " " . s:editor_root . "/bundle/Vundle.vim"
    let vundle_installed=0
endif


call vundle#rc(s:editor_root . '/bundle')
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

" Syntax plugins
Plugin 'tmhedberg/SimpylFold'
Plugin 'ClockworkNet/vim-junos-syntax'
Plugin 'nathanalderson/yang.vim'
Plugin 'mitsuhiko/vim-jinja'
Plugin 'sheerun/vim-polyglot'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'fatih/vim-go'
Plugin 'chase/vim-ansible-yaml'

" Color schemes
Plugin 'joshdick/onedark.vim'
Plugin 'altercation/vim-colors-solarized'

" Status and tabline
" Airline
" Plugin 'joshdick/airline-onedark.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'powerline/powerline'


" Utility plugins
Plugin 'neomake/neomake'
Plugin 'nvie/vim-flake8'
Plugin 'ntpeters/vim-better-whitespace'
Plugin 'suan/vim-instant-markdown'
" Plugin 'dhruvasagar/vim-table-mode'
" Plugin 'kana/vim-fakeclip'
" Plugin 'jlfwong/vim-arcanist'
" Plugin 'phleet/vim-mercenary'
" Plugin 'hynek/vim-python-pep8-indent'
" Plugin 'tpope/vim-abolish'

Plugin 'junegunn/fzf.vim'

" Powerhouse plugins
Plugin 'Rykka/riv.vim'
Plugin 'Rykka/InstantRst'
Plugin 'tomtom/tcomment_vim'
Plugin 'scrooloose/nerdtree'
Plugin 'godlygeek/tabular'

" Autocomplete Plugins
Plugin 'Shougo/deoplete.nvim'
Plugin 'davidhalter/jedi-vim'
" Plugin 'Shougo/ddc.vim'

" Plugin 'honza/vim-snippets'
" Plugin 'ervandew/supertab'
" Plugin 'Yggdroot/indentLine'
Plugin 'terryma/vim-expand-region'

if vundle_installed == 0
    echo "Installing Bundles, please ignore key map error messages"
    echo ""
    :PluginInstall
endif

call vundle#end()

" #########
" Filetypes
" #########

au BufRead,BufNewFile Dockerfile set ft=Dockerfile
au BufRead,BufNewFile *.pp set ts=2 sw=2 sts=2 filetype=puppet
au BufRead,BufNewFile *rb set ts=2 sw=2 sts=2 expandtab
au BufRead,BufNewFile *j2 set ts=2 sw=2 sts=2 expandtab ft=jinja
au BufRead,BufNewFile *go set noexpandtab

au BufRead,BufNewFile *.pconf set filetype=python
au BufRead,BufNewFile *.cconf set filetype=python
au BufRead,BufNewFile *.mcconf set filetype=python
au BufRead,BufNewFile *.cinc set filetype=python
au BufRead,BufNewFile TARGETS set filetype=bzl

au BufRead,BufNewFile *.thrift set filetype=thrift
au BufRead,BufNewFile *.sls set filetype=yaml

" YAML Config
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType sls setlocal ts=2 sts=2 sw=2 expandtab

let g:NERDTreeIgnore = ['\.pyc$']

" Close vim if NERDTree is the only window open and auto open for every tab
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
autocmd BufWinEnter * NERDTreeMirror


let python_highlight_all = 1

" ######
" Golang
" ######
" Don't auto-add package declaration
let g:go_template_autocreate = 0
let g:go_highlight_functions = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
" Still not sure if I like all the extra color
" let g:go_highlight_methods = 1
" let g:go_highlight_fields = 1
" let g:go_highlight_types = 1

" This is quite cool / handy
let g:go_fmt_command = "goimports"


au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>c <Plug>(go-coverage)

au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)

au FileType go nmap <Leader>gs <Plug>(go-implements)
au FileType go nmap <leader>gt <Plug>(go-test)
au FileType go nmap <Leader>gr <Plug>(go-rename)


" Maps <Leader>l to highlight current line
" Entering :match will clear highlighting
nnoremap <silent> <Leader>l ml:execute 'match Search /\%'.line('.').'l/'<CR>
                                " without auto indentation being applied.

" ######
" Colors
" ######

" set t_Co=256
" colorscheme molokai
highlight Search ctermbg='NONE' ctermfg=226

" ########
" Markdown
" ########

autocmd BufNewFile,BufRead *.md map <Leader>1 :HeaderDecrease<CR>
autocmd BufNewFile,BufRead *.md map <Leader>2 :HeaderIncrease<CR>
autocmd BufNewFile,BufRead *.md map <Leader>toc :Toch<CR>
let g:vim_markdown_frontmatter=1

" #######
" NeoMake
" #######

autocmd BufWritePost,BufEnter * Neomake
let g:neomake_python_enabled_makers = ['flake8']

" ########
" Deoplete
" ########

let g:deoplete#enable_at_startup = 1
let g:deoplete#auto_completion_start_length = 1
" let g:deoplete#enable_smart_case = 1
"
let g:jedi#completions_enabled = 0
let g:jedi#auto_vim_configuration = 0
let g:jedi#force_py_version = 3
let g:jedi#show_call_signatures = "1"
let g:jedi#popup_on_dot = 0
let g:jedi#show_call_signatures = "2"



autocmd FileType python setlocal completeopt-=preview

" let g:deoplete#sources#jedi#show_docstring = 1
" let g:deoplete#sources#jedi#enable_cache = 1

" if !exists('g:deoplete#omni#input_patterns')
"   let g:deoplete#omni#input_patterns = {}
" endif

inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"

" #########
" Clipboard
" #########

set clipboard+=unnamedplus

if !has('nvim')
    :com -range Cz :silent :<line1>,<line2>w !xsel -i -b
    :com -range Cx :silent :<line1>,<line2>w !xsel -i -p
    :com -range Cv :silent :<line1>,<line2>w !xsel -i -s
    :ca cv Cv
    :ca cz Cz
    :ca cx Cx

    :com -range Pz :silent :r !xsel -o -b
    :com -range Px :silent :r !xsel -o -p
    :com -range Pv :silent :r !xsel -o -s

    :ca pz Pz
    :ca px Px
    :ca pv Pv

    function! CopyMatches(reg)
        let hits = []
        %s//\=len(add(hits, submatch(0))) ? submatch(0) : ''/ge
        let reg = empty(a:reg) ? '+' : a:reg
        execute 'let @'.reg.' = join(hits, "\n") . "\n"'
    endfunction
    command! -register CopyMatches call CopyMatches(<q-reg>)
endif

" ####################
" Snippets (Ultisnips)
" ####################

let g:UltiSnipsExpandTrigger='<leader>.'
" let g:UltiSnipsJumpForwardTrigger='<leader>r'
" let g:UltiSnipsJumpBackwardTrigger='<leader>w'
let g:UltiSnipsJumpForwardTrigger='<tab>'
let g:UltiSnipsJumpBackwardTrigger='<s-tab>'

nnoremap <leader>ue :UltiSnipsEdit<CR>

let g:UltiSnipsEditSplit='vertical'
"
" let g:UltiSnipsUsePythonVersion = 3
let g:ultisnips_python_style="google"
let g:UltiSnipsSnippetDirectories=["UltiSnips", "vim-snippets"]
let g:UltiSnipsSnippetsDir="~/.vim/UltiSnips"

" #########
" Overrides
" #########

let override_file=s:editor_root . 'override.vim'
if filereadable(override_file)
    source override_file
endif

" #######
" Airline
" #######
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

colorscheme onedark
let g:airline_theme='onedark'

" ###########
" SimplylFold
" ###########

set foldlevel=10
let g:SimpylFold_fold_docstring = 0
" autocmd BufWinEnter *.py setlocal foldexpr=SimpylFold(v:lnum) foldmethod=expr
" autocmd BufWinLeave *.py setlocal foldexpr< foldmethod<

" #############
" expand-region
" #############
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)
